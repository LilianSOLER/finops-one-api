stages:
  - lint
  - build
  - test
  - build-images
  - deploy
  - sonarqube-check
  - sonarqube-vulnerability-report

lint:
  image: node:lts
  stage: lint
  script:
    - npm install --progress=false
    - npm run format

build:
  image: node:lts
  stage: build
  needs:
    - lint
  artifacts:
    paths:
      - dist/
  script:
    - npm install --progress=false
    - npm run build

test-coverage:
  image: node:lts
  stage: test
  needs:
    - build
  artifacts:
    paths:
      - coverage/
  script:
    - npm install --progress=false
    - npm run test:cov
  coverage: /All files\s*\|\s*([\d\.]+)/

.install-bash: &install-bash
  - apk update
  - apk upgrade
  - apk add bash

docker-build:
    image: docker:24.0.5
    stage: build-images
    tags:
        - self-docker-1
    only:
        - main
        - develop
    services:
      - docker:24.0.5-dind
    needs:
        - test-coverage
    variables:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_TLS_CERTDIR: ""

    script:
        - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
        - echo "$CI_REGISTRY_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:latest
        - docker push $CI_REGISTRY_IMAGE:latest

docker-build-tag:
    image: docker:24.0.5
    stage: build-images
    tags:
      - self-docker-1
    only:
        - tags
    services:
      - docker:24.0.5-dind
    needs:
        - test-coverage
    variables:
      DOCKER_HOST: tcp://docker:2375
      DOCKER_TLS_CERTDIR: ""
    before_script:
        - *install-bash
    script:
        - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
        - echo "$CI_REGISTRY_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:latest
        - docker push $CI_REGISTRY_IMAGE:latest
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

.install-ssh: &install-ssh
  - apk add openssh-client
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$CI_SSH_KEY" >> ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - ssh-add ~/.ssh/id_rsa
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - chmod 644 ~/.ssh/config
  - ssh-keyscan -H $CI_SSH_HOST >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

.deploy-template: &deploy-template
  image: alpine
  stage: deploy
  before_script:
    - *install-ssh
  script:
    - scp -o StrictHostKeyChecking=no docker-compose.yml $CI_SSH_USER@$CI_SSH_HOST:$CI_SSH_PATH/docker-compose.yml
    - ssh -o StrictHostKeyChecking=no $CI_SSH_USER@$CI_SSH_HOST "cd $CI_SSH_PATH && echo "$CI_REGISTRY_TOKEN" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin && docker compose --env-file .env down && docker compose --env-file .env pull || true &&  docker compose --env-file .env up --remove-orphans -d"

deploy-prod:
  <<: *deploy-template
  environment:
    name: prod
    url: https://api.finopsone.home.didelo.fr
  needs:
    - docker-build-tag
  only:
    - tags

deploy-staging:
  <<: *deploy-template
  environment:
    name: staging
    url: https://dev.api.finopsone.home.didelo.fr
  needs:
    - docker-build
  only:
    - develop

sonarqube-check:
  stage: sonarqube-check
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
    - feature/3-setup-quality-code-control

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=projet-s10-console-finops-multicloud_finops-one-api_AY17J9QeMBkBLy1hM32S&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
    - feature/3-setup-quality-code-control
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check
