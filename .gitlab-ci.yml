stages:
  - lint
  - build
  - test
  - build-images
  - deploy

lint:
  image: node:lts
  stage: lint
  script:
    - npm install --progress=false
    - npm run format

build:
  image: node:lts
  stage: build
  needs:
    - lint
  artifacts:
    paths:
      - dist/
  script:
    - npm install --progress=false
    - npm run build

test-coverage:
  image: node:lts
  stage: test
  needs:
    - build
  artifacts:
    paths:
      - coverage/
  script:
    - npm install --progress=false
    - npm run test:cov
  coverage: /All files\s*\|\s*([\d\.]+)/

docker-build:
    image: docker:stable
    stage: build-images
    only:
        - main
        - develop
        - feature/2-*
    needs:
        - test-coverage
    services:
        - docker:dind
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    script:
        - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
        - docker login $CI_REGISTRY -u CI_REGISTRY_USERNAME --password-stdin <<<CI_REGISTRY_TOKEN
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:latest
        - docker push $CI_REGISTRY_IMAGE:latest

docker-build-tag:
    image: docker:stable
    stage: build-images
    only:
        - tags
    needs:
        - test-coverage
    services:
        - docker:dind
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    script:
        - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
        - docker login $CI_REGISTRY -u CI_REGISTRY_USERNAME --password-stdin <<<CI_REGISTRY_TOKEN
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:latest
        - docker push $CI_REGISTRY_IMAGE:latest
        - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
        - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

.install-ssh: &install-ssh
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
  - eval $(ssh-agent -s)
  - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

.install-bash: &install-bash
  - apk update
  - apk upgrade
  - apk add bash

.deploy-template: &deploy-template
  stage: deploy
  before_script:
    - *install-ssh
    - *install-bash
  script:
    - 'scp -o StrictHostKeyChecking=no docker-compose.yml $CI_SSH_USER@$CI_SSH_HOST:$CI_SSH_PATH'
    - ssh -o StrictHostKeyChecking=no $CI_SSH_USER@$CI_SSH_HOST "cd $CI_SSH_PATH && docker-compose --env-file .env pull || true && docker-compose up --env-file .env -d --remove-orphans"

deploy-prod:
  <<: *deploy-template
  environment:
    name: prod
    url: https://api.finopsone.home.didelo.fr
  needs:
    - docker-build-tag
  only:
    - tags

deploy-staging:
  <<: *deploy-template
  environment:
    name: staging
    url: https://dev.api.finopsone.home.didelo.fr
  needs:
    - docker-build
  only:
    - develop
    - feature/2-*




